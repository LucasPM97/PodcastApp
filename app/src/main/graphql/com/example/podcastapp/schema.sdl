directive @specifiedBy(url: String!) on SCALAR
type ComicIssue {
    uuid: ID
    seriesUuid: ID
    datePublished: Int
    name: String
    creatorNote: String
    hash: String
    storiesHash: String
    bannerImageUrl(variant: ImageVariant): String
    thumbnailImageUrl: String
    bannerImageAsString: String
    thumbnailImageAsString: String
    storyImageUrls: [String]
    stories: [ComicStory]
    isRemoved: Boolean
    isBlocked: Boolean
    comicSeries: ComicSeries
}

type ComicSeries {
    uuid: ID
    datePublished: Int
    name: String
    description: String
    coverImageUrl(variant: ImageVariant): String
    bannerImageUrl(variant: ImageVariant): String
    thumbnailImageUrl: String
    coverImageAsString: String
    bannerImageAsString: String
    thumbnailImageAsString: String
    hash: String
    issuesHash: String
    issues(
        sortOrder: SortOrder
        page: Int
        limitPerPage: Int
        searchTerm: String
        includeRemovedIssues: Boolean
    ): [ComicIssue]
    tags: [String]
    genres: [Genre]
    language: Language
    creators: [Creator]
    seriesType: ComicSeriesType
    contentRating: ContentRating
    sssUrl: String
    sssOwnerName: String
    sssOwnerPublicEmail: String
    copyright: String
    feedRefreshDetails: FeedRefreshDetails
    isCompleted: Boolean
    isBlocked: Boolean
}

enum ComicSeriesType {
    WEBTOON
}

type ComicStory {
    uuid: ID
    issueUuid: ID
    seriesUuid: ID
    hash: String
    storyImageUrl: String
    storyImageAsString: String
    isRemoved: Boolean
    comicIssue: ComicIssue
    comicSeries: ComicSeries
}

enum ContentRating {
    COMICSERIES_BABY
    COMICSERIES_KIDS
    COMICSERIES_TEENS
    COMICSERIES_MATURE_TEENS
    COMICSERIES_ADULTS
    COMICSERIES_PORNOGRAPHY
}

enum ContentRole {
    COMICSERIES_ARTIST
    COMICSERIES_ARTIST_PENCILER
    COMICSERIES_ARTIST_INKER
    COMICSERIES_ARTIST_COLORIST
    COMICSERIES_ARTIST_LETTERER
    COMICSERIES_WRITER
    COMICSERIES_PRODUCER
    COMICSERIES_EDITOR
    COMICSERIES_TRANSLATOR
}

enum Country {
    AFGHANISTAN
    ALAND_ISLANDS
    ALBANIA
    ALGERIA
    AMERICAN_SAMOA
    ANDORRA
    ANGOLA
    ANGUILLA
    ANTARCTICA
    ANTIGUA_AND_BARBUDA
    ARGENTINA
    ARMENIA
    ARUBA
    AUSTRALIA
    AUSTRIA
    AZERBAIJAN
    BAHAMAS
    BAHRAIN
    BANGLADESH
    BARBADOS
    BELARUS
    BELGIUM
    BELIZE
    BENIN
    BERMUDA
    BHUTAN
    BOLIVIA_PLURINATIONAL_STATE_OF
    BONAIRE_SINT_EUSTATIUS_AND_SABA
    BOSNIA_AND_HERZEGOVINA
    BOTSWANA
    BOUVET_ISLAND
    BRAZIL
    BRITISH_INDIAN_OCEAN_TERRITORY_THE
    BRUNEI_DARUSSALAM
    BULGARIA
    BURKINA_FASO
    BURUNDI
    CABO_VERDE
    CAMBODIA
    CAMEROON
    CANADA
    CAYMAN_ISLANDS
    CENTRAL_AFRICAN_REPUBLIC
    CHAD
    CHILE
    CHINA
    CHRISTMAS_ISLAND
    COCOS_KEELING_ISLANDS
    COLOMBIA
    COMOROS
    CONGO
    CONGO_THE_DEMOCRATIC_REPUBLIC_OF
    COOK_ISLANDS
    COSTA_RICA
    COTE_D_IVOIRE
    CROATIA
    CUBA
    CURACAO
    CYPRUS
    CZECHIA
    DENMARK
    DJIBOUTI
    DOMINICA
    DOMINICAN_REPUBLIC
    ECUADOR
    EGYPT
    EL_SALVADOR
    EQUATORIAL_GUINEA
    ERITREA
    ESTONIA
    ESWATINI
    ETHIOPIA
    FALKLAND_ISLANDS_THE_MALVINAS
    FAROE_ISLANDS
    FIJI
    FINLAND
    FRANCE
    FRENCH_GUIANA
    FRENCH_POLYNESIA
    FRENCH_SOUTHERN_TERRITORIES
    GABON
    GAMBIA
    GEORGIA
    GERMANY
    GHANA
    GIBRALTAR
    GREECE
    GREENLAND
    GRENADA
    GUADELOUPE
    GUAM
    GUATEMALA
    GUERNSEY
    GUINEA
    GUINEA_BISSAU
    GUYANA
    HAITI
    HEARD_ISLAND_AND_MCDONALD_ISLANDS
    HOLY_SEE
    HONDURAS
    HONG_KONG
    HUNGARY
    ICELAND
    INDIA
    INDONESIA
    IRAN
    IRAQ
    IRELAND
    ISLE_OF_MAN
    ISRAEL
    ITALY
    JAMAICA
    JAPAN
    JERSEY
    JORDAN
    KAZAKHSTAN
    KENYA
    KIRIBATI
    KOREA_NORTH
    KOREA_SOUTH
    KUWAIT
    KYRGYZSTAN
    LAO_PEOPLES_DEMOCRATIC_REPUBLIC_THE
    LATVIA
    LEBANON
    LESOTHO
    LIBERIA
    LIBYA
    LIECHTENSTEIN
    LITHUANIA
    LUXEMBOURG
    MACAO
    MADAGASCAR
    MALAWI
    MALAYSIA
    MALDIVES
    MALI
    MALTA
    MARSHALL_ISLANDS
    MARTINIQUE
    MAURITANIA
    MAURITIUS
    MAYOTTE
    MEXICO
    MICRONESIA_FEDERATED_STATES
    MINOR_OUTLYING_ISLANDS_US
    MOLDOVA_THE_REPUBLIC
    MONACO
    MONGOLIA
    MONTENEGRO
    MONTSERRAT
    MOROCCO
    MOZAMBIQUE
    MYANMAR
    NAMIBIA
    NAURU
    NEPAL
    NETHERLANDS
    NEW_CALEDONIA
    NEW_ZEALAND
    NICARAGUA
    NIGER
    NIGERIA
    NIUE
    NORFOLK_ISLAND
    NORTH_MACEDONIA
    NORTHERN_MARIANA_ISLANDS
    NORWAY
    OMAN
    PAKISTAN
    PALAU
    PALESTINE_STATE
    PANAMA
    PAPUA_NEW_GUINEA
    PARAGUAY
    PERU
    PHILIPPINES
    PITCAIRN
    POLAND
    PORTUGAL
    PUERTO_RICO
    QATAR
    REUNION
    ROMANIA
    RUSSIA
    RWANDA
    SAINT_BARTHELEMY
    SAINT_HELENA_ASCENSION_AND_TRISTAN_DA_CUNHA
    SAINT_KITTS_AND_NEVIS
    SAINT_LUCIA
    SAINT_MARTIN_FRENCH_PART
    SAINT_PIERRE_AND_MIQUELON
    SAINT_VINCENT_AND_THE_GRENADINES
    SAMOA
    SAN_MARINO
    SAO_TOME_AND_PRINCIPE
    SAUDI_ARABIA
    SENEGAL
    SERBIA
    SEYCHELLES
    SIERRA_LEONE
    SINGAPORE
    SINT_MAARTEN_DUTCH_PART
    SLOVAKIA
    SLOVENIA
    SOLOMON_ISLANDS
    SOMALIA
    SOUTH_AFRICA
    SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS
    SOUTH_SUDAN
    SPAIN
    SRI_LANKA
    SUDAN
    SURINAME
    SVALBARD_AND_JAN_MAYEN
    SWEDEN
    SWITZERLAND
    SYRIA
    TAIWAN
    TAJIKISTAN
    TANZANIA
    THAILAND
    TIMOR_LESTE
    TOGO
    TOKELAU
    TONGA
    TRINIDAD_AND_TOBAGO
    TUNISIA
    TURKEY
    TURKMENISTAN
    TURKS_AND_CAICOS_ISLANDS
    TUVALU
    UGANDA
    UKRAINE
    UNITED_ARAB_EMIRATES
    UNITED_KINGDOM
    UNITED_STATES_OF_AMERICA
    URUGUAY
    UZBEKISTAN
    VANUATU
    VENEZUELA
    VIETNAM
    VIRGIN_ISLANDS_BRITISH
    VIRGIN_ISLANDS_US
    WALLIS_AND_FUTUNA
    WESTERN_SAHARA
    YEMEN
    ZAMBIA
    ZIMBABWE
}

type Creator {
    uuid: ID
    datePublished: Int
    name: String
    bio: String
    avatarImageUrl(variant: ImageVariant): String
    avatarImageAsString: String
    hash: String
    contentHash: String
    content(
        sortOrder: SortOrder
        page: Int
        limitPerPage: Int
    ): [CreatorContent]
    tags: [String]
    linksAsString: String
    links: [LinkDetails]
    country: Country
    sssUrl: String
    sssOwnerName: String
    sssOwnerPublicEmail: String
    copyright: String
    feedRefreshDetails: FeedRefreshDetails
    isBlocked: Boolean
}

type CreatorContent {
    uuid: ID
    hash: String
    creatorUuid: ID
    contentUuid: ID
    contentType: TaddyType
    roles: [ContentRole]
    position: Int
    contentPosition: Int
}

type DevApp {
    id: ID
    apiKey: String
}

type Documentation {
    id: ID
    text: String
}

type FeedRefreshDetails {
    uuid: ID
    priority: FeedRefreshPriority
    priorityReason: FeedRefreshPriorityReason
    dateLastRefreshed: Int
    websubDetails: WebsubDetails
}

enum FeedRefreshPriority {
    WEBSUB
    HIGH
    REGULAR
    LOW
    INACTIVE
    NEVER
}

enum FeedRefreshPriorityReason {
    INACTIVE_FOR_OVER_1_YEAR
    DUPLICATE_FEED
    ERROR_PARSING_FEED
    FEED_URL_NOT_WORKING
}

enum Genre {
    PODCASTSERIES_ARTS
    PODCASTSERIES_ARTS_BOOKS
    PODCASTSERIES_ARTS_DESIGN
    PODCASTSERIES_ARTS_FASHION_AND_BEAUTY
    PODCASTSERIES_ARTS_FOOD
    PODCASTSERIES_ARTS_PERFORMING_ARTS
    PODCASTSERIES_ARTS_VISUAL_ARTS
    PODCASTSERIES_BUSINESS
    PODCASTSERIES_BUSINESS_CAREERS
    PODCASTSERIES_BUSINESS_ENTREPRENEURSHIP
    PODCASTSERIES_BUSINESS_INVESTING
    PODCASTSERIES_BUSINESS_MANAGEMENT
    PODCASTSERIES_BUSINESS_MARKETING
    PODCASTSERIES_BUSINESS_NON_PROFIT
    PODCASTSERIES_COMEDY
    PODCASTSERIES_COMEDY_INTERVIEWS
    PODCASTSERIES_COMEDY_IMPROV
    PODCASTSERIES_COMEDY_STANDUP
    PODCASTSERIES_EDUCATION
    PODCASTSERIES_EDUCATION_COURSES
    PODCASTSERIES_EDUCATION_HOW_TO
    PODCASTSERIES_EDUCATION_LANGUAGE_LEARNING
    PODCASTSERIES_EDUCATION_SELF_IMPROVEMENT
    PODCASTSERIES_FICTION
    PODCASTSERIES_FICTION_COMEDY_FICTION
    PODCASTSERIES_FICTION_DRAMA
    PODCASTSERIES_FICTION_SCIENCE_FICTION
    PODCASTSERIES_GOVERNMENT
    PODCASTSERIES_HISTORY
    PODCASTSERIES_HEALTH_AND_FITNESS
    PODCASTSERIES_HEALTH_AND_FITNESS_ALTERNATIVE_HEALTH
    PODCASTSERIES_HEALTH_AND_FITNESS_FITNESS
    PODCASTSERIES_HEALTH_AND_FITNESS_MEDICINE
    PODCASTSERIES_HEALTH_AND_FITNESS_MENTAL_HEALTH
    PODCASTSERIES_HEALTH_AND_FITNESS_NUTRITION
    PODCASTSERIES_HEALTH_AND_FITNESS_SEXUALITY
    PODCASTSERIES_KIDS_AND_FAMILY
    PODCASTSERIES_KIDS_AND_FAMILY_EDUCATION_FOR_KIDS
    PODCASTSERIES_KIDS_AND_FAMILY_PARENTING
    PODCASTSERIES_KIDS_AND_FAMILY_PETS_AND_ANIMALS
    PODCASTSERIES_KIDS_AND_FAMILY_STORIES_FOR_KIDS
    PODCASTSERIES_LEISURE
    PODCASTSERIES_LEISURE_ANIMATION_AND_MANGA
    PODCASTSERIES_LEISURE_AUTOMOTIVE
    PODCASTSERIES_LEISURE_AVIATION
    PODCASTSERIES_LEISURE_CRAFTS
    PODCASTSERIES_LEISURE_GAMES
    PODCASTSERIES_LEISURE_HOBBIES
    PODCASTSERIES_LEISURE_HOME_AND_GARDEN
    PODCASTSERIES_LEISURE_VIDEO_GAMES
    PODCASTSERIES_MUSIC
    PODCASTSERIES_MUSIC_COMMENTARY
    PODCASTSERIES_MUSIC_HISTORY
    PODCASTSERIES_MUSIC_INTERVIEWS
    PODCASTSERIES_NEWS
    PODCASTSERIES_NEWS_BUSINESS
    PODCASTSERIES_NEWS_DAILY_NEWS
    PODCASTSERIES_NEWS_ENTERTAINMENT
    PODCASTSERIES_NEWS_COMMENTARY
    PODCASTSERIES_NEWS_POLITICS
    PODCASTSERIES_NEWS_SPORTS
    PODCASTSERIES_NEWS_TECH
    PODCASTSERIES_RELIGION_AND_SPIRITUALITY
    PODCASTSERIES_RELIGION_AND_SPIRITUALITY_BUDDHISM
    PODCASTSERIES_RELIGION_AND_SPIRITUALITY_CHRISTIANITY
    PODCASTSERIES_RELIGION_AND_SPIRITUALITY_HINDUISM
    PODCASTSERIES_RELIGION_AND_SPIRITUALITY_ISLAM
    PODCASTSERIES_RELIGION_AND_SPIRITUALITY_JUDAISM
    PODCASTSERIES_RELIGION_AND_SPIRITUALITY_RELIGION
    PODCASTSERIES_RELIGION_AND_SPIRITUALITY_SPIRITUALITY
    PODCASTSERIES_SCIENCE
    PODCASTSERIES_SCIENCE_ASTRONOMY
    PODCASTSERIES_SCIENCE_CHEMISTRY
    PODCASTSERIES_SCIENCE_EARTH_SCIENCES
    PODCASTSERIES_SCIENCE_LIFE_SCIENCES
    PODCASTSERIES_SCIENCE_MATHEMATICS
    PODCASTSERIES_SCIENCE_NATURAL_SCIENCES
    PODCASTSERIES_SCIENCE_NATURE
    PODCASTSERIES_SCIENCE_PHYSICS
    PODCASTSERIES_SCIENCE_SOCIAL_SCIENCES
    PODCASTSERIES_SOCIETY_AND_CULTURE
    PODCASTSERIES_SOCIETY_AND_CULTURE_DOCUMENTARY
    PODCASTSERIES_SOCIETY_AND_CULTURE_PERSONAL_JOURNALS
    PODCASTSERIES_SOCIETY_AND_CULTURE_PHILOSOPHY
    PODCASTSERIES_SOCIETY_AND_CULTURE_PLACES_AND_TRAVEL
    PODCASTSERIES_SOCIETY_AND_CULTURE_RELATIONSHIPS
    PODCASTSERIES_SPORTS
    PODCASTSERIES_SPORTS_BASEBALL
    PODCASTSERIES_SPORTS_BASKETBALL
    PODCASTSERIES_SPORTS_CRICKET
    PODCASTSERIES_SPORTS_FANTASY_SPORTS
    PODCASTSERIES_SPORTS_FOOTBALL
    PODCASTSERIES_SPORTS_GOLF
    PODCASTSERIES_SPORTS_HOCKEY
    PODCASTSERIES_SPORTS_RUGBY
    PODCASTSERIES_SPORTS_RUNNING
    PODCASTSERIES_SPORTS_SOCCER
    PODCASTSERIES_SPORTS_SWIMMING
    PODCASTSERIES_SPORTS_TENNIS
    PODCASTSERIES_SPORTS_VOLLEYBALL
    PODCASTSERIES_SPORTS_WILDERNESS
    PODCASTSERIES_SPORTS_WRESTLING
    PODCASTSERIES_TECHNOLOGY
    PODCASTSERIES_TRUE_CRIME
    PODCASTSERIES_TV_AND_FILM
    PODCASTSERIES_TV_AND_FILM_AFTER_SHOWS
    PODCASTSERIES_TV_AND_FILM_HISTORY
    PODCASTSERIES_TV_AND_FILM_INTERVIEWS
    PODCASTSERIES_TV_AND_FILM_FILM_REVIEWS
    PODCASTSERIES_TV_AND_FILM_TV_REVIEWS
    COMICSERIES_ACTION
    COMICSERIES_COMEDY
    COMICSERIES_CRIME
    COMICSERIES_DRAMA
    COMICSERIES_EDUCATIONAL
    COMICSERIES_FANTASY
    COMICSERIES_HISTORICAL
    COMICSERIES_HORROR
    COMICSERIES_INSPIRATIONAL
    COMICSERIES_MYSTERY
    COMICSERIES_ROMANCE
    COMICSERIES_SCI_FI
    COMICSERIES_SLICE_OF_LIFE
    COMICSERIES_SUPERHERO
    COMICSERIES_SUPERNATURAL
    COMICSERIES_WHOLESOME
    COMICSERIES_BL
    COMICSERIES_GL
    COMICSERIES_LGBTQ
    COMICSERIES_TRILLER
    COMICSERIES_ZOMBIES
    COMICSERIES_POST_APOCALYPTIC
    COMICSERIES_SCHOOL
    COMICSERIES_SPORTS
    COMICSERIES_ANIMALS
    COMICSERIES_GAMING
}

enum ImageVariant {
    SMALL
    MEDIUM
    LARGE
}

type InternalComicIssue {
    id: ID
    uuid: ID
    createdAt: Int
    publishAt: Int
    datePublished: Int
    status: InternalPublishStatus
    imagesStatus: InternalPublishImageStatus
    name: String
    bannerImageUrl: String
    thumbnailImageUrl: String
    imageUrls: [String]
    imageUrlsProcessing: [String]
    seriesUuid: ID
    series: InternalComicSeries
    stories: [InternalComicStory]
    isBlocked: Boolean
    blockedReason: String
}

type InternalComicSeries {
    id: ID
    uuid: ID
    datePublished: Int
    status: InternalPublishStatus
    imagesStatus: InternalPublishImageStatus
    name: String
    description(shouldStripHtmlTags: Boolean): String
    coverImageUrl: String
    bannerImageUrl: String
    thumbnailImageUrl: String
    seriesType: ComicSeriesType
    genre1: Genre
    genre2: Genre
    language: Language
    rating: ContentRating
    tags: [String]
    copyright: String
    sssOwnerName: String
    sssOwnerPublicEmail: String
    isComplete: Boolean
    issues(
        sortOrder: SortOrder
        page: Int
        limitPerPage: Int
        filterForStatus: InternalPublishStatus
    ): [InternalComicIssue]
    isBlocked: Boolean
    blockedReason: String
    counts: InternalSeriesCounts
    creatorRoles: [InternalCreatorRoles]
}

type InternalComicStory {
    id: ID
    uuid: ID
    imageUrl: String
    position: Int
}

type InternalCreator {
    id: ID
    uuid: ID
    datePublished: Int
    status: InternalPublishStatus
    imagesStatus: InternalPublishImageStatus
    name: String
    bio(shouldStripHtmlTags: Boolean): String
    avatarImageUrl: String
    country: Country
    links: [String]
    tags: [String]
    copyright: String
    sssOwnerName: String
    sssOwnerPublicEmail: String
    isBlocked: Boolean
}

type InternalCreatorRoles {
    id: ID
    contentUuid: ID
    creatorUuid: ID
    roles: [ContentRole]
}

type InternalInvitation {
    id: ID
    contentUuid: ID
    contentType: String
    email: String
    permission: UserPermission
    status: InvitationStatus
}

enum InternalPublishImageStatus {
    PROCESSING
    COMPLETE
}

enum InternalPublishStatus {
    DRAFT
    PUBLISHED
    SCHEDULED
}

type InternalSeriesCounts {
    contentUuid: ID!
    contentType: String
    creators: Int
    issues: Int
}

enum InternalSeriesType {
    INTERNAL_COMICSERIES
    INTERNAL_CREATOR
}

enum InvitationStatus {
    PENDING
    ACCEPTED
    EXPIRED
}

type iTunesInfo {
    uuid: ID
    hash: String
    subtitle: String
    summary: String
    baseArtworkUrl: String
    baseArtworkUrlOf(size: Int): String
    publisherId: Int
    publisherName: String
    country: Country
    podcastSeries: PodcastSeries
}

enum Language {
    ABKHAZIAN
    AFAR
    AFRIKAANS
    AKAN
    ALBANIAN
    AMHARIC
    ARABIC
    ARAGONESE
    ARMENIAN
    ASSAMESE
    AVARIC
    AVESTAN
    AYMARA
    AZERBAIJANI
    BAMBARA
    BASHKIR
    BASQUE
    BELARUSIAN
    BENGALI
    BIHARI_LANGUAGES
    BISLAMA
    BOSNIAN
    BRETON
    BULGARIAN
    BURMESE
    CENTRAL_KHMER
    CHAMORRO
    CHECHEN
    CHICHEWA_CHEWA_NYANJA
    CHINESE
    CHURCH_SLAVONIC
    CHUVASH
    CORNISH
    CORSICAN
    CREE
    CROATIAN
    CZECH
    DANISH
    DHIVEHI_MALDIVIAN
    DUTCH_FLEMISH
    DZONGKHA
    ENGLISH
    ESPERANTO
    ESTONIAN
    EWE
    FAROESE
    FARSI
    FIJIAN
    FINNISH
    FRENCH
    FULAH
    GAELIC
    GALICIAN
    GANDA
    GEORGIAN
    GERMAN
    GIKUYU
    GREEK
    GUARANI
    GUJARATI
    HAITIAN_CREOLE
    HAUSA
    HEBREW
    HERERO
    HINDI
    HIRI_MOTU
    HUNGARIAN
    ICELANDIC
    IDO
    IGBO
    INDONESIAN
    INTERLINGUA
    INTERLINGUE_OCCIDENTAL
    INUKTITUT
    INUPIAQ
    IRISH
    ITALIAN
    JAPANESE
    JAVANESE
    KALAALLISUT_GREENLANDIC
    KANNADA
    KANURI
    KASHMIRI
    KAZAKH
    KINYARWANDA
    KOMI
    KONGO
    KOREAN
    KURDISH
    KWANYAMA
    KYRGYZ
    LAO
    LATIN
    LATVIAN
    LETZEBURGESCH
    LIMBURGISH
    LINGALA
    LITHUANIAN
    LUBA_KATANGA
    MACEDONIAN
    MALAGASY
    MALAY
    MALAYALAM
    MALTESE
    MANX
    MAORI
    MARATHI
    MARSHALLESE
    MONGOLIAN
    NAURU
    NAVAJO
    NDONGA
    NEPALI
    NORTH_NDEBELE
    NORTHERN_SAMI
    NORWEGIAN
    NORWEGIAN_BOKMAL
    NORWEGIAN_NYNORSK
    NUOSU_SICHUAN_YI
    OCCITAN
    OJIBWA
    ORIYA
    OROMO
    OSSETIAN
    PALI
    PASHTO
    POLISH
    PORTUGUESE
    PUNJABI
    QUECHUA
    ROMANIAN_MOLDOVAN
    ROMANSH
    RUNDI
    RUSSIAN
    SAMOAN
    SANGO
    SANSKRIT
    SARDINIAN
    SERBIAN
    SHONA
    SINDHI
    SINHALA
    SLOVAK
    SLOVENIAN
    SOMALI
    SOTHO
    SOUTH_NDEBELE
    SPANISH
    SUNDANESE
    SWAHILI
    SWATI
    SWEDISH
    TAGALOG
    TAHITIAN
    TAJIK
    TAMIL
    TATAR
    TELUGU
    THAI
    TIBETAN
    TIGRINYA
    TONGA
    TSONGA
    TSWANA
    TURKISH
    TURKMEN
    TWI
    UKRAINIAN
    URDU
    UYGHUR
    UZBEK
    VALENCIAN_CATALAN
    VENDA
    VIETNAMESE
    VOLAPUK
    WALLOON
    WELSH
    WESTERN_FRISIAN
    WOLOF
    XHOSA
    YIDDISH
    YORUBA
    ZHUANG
    ZULU
}

type LinkDetails {
    type: LinkType
    url: String
}

enum LinkType {
    INSTAGRAM
    YOUTUBE
    TIKTOK
    PATREON
    EMAIL
    TWITTER
    MASTODON
    FACEBOOK
    WEBSITE
    MERCH_STORE
    TWITCH
    SNAPCHAT
    REDDIT
    DISCORD
    TELEGRAM
    PINTEREST
    TUMBLR
    SPOTIFY
    SOUNDCLOUD
    BANDCAMP
    VIMEO
    WECHAT
    WHATSAPP
}

type Mutation {
    generateWebhookEventsFromIds(ids: [String]): [WebhookEvent]
    addWebhookUrlForUser(endpointUrl: String!, webhookEvents: [String!]!): Webhook
    updateWebhookForUser(
        id: ID!
        endpointUrl: String!
        webhookEvents: [String!]!
    ): Webhook
    deleteWebhookForUser(id: ID!): ID
    addNewDevApp: DevApp
    addInternalComicForUser(
        uuid: ID!
        name: String!
        description: String!
        coverImageUrl: String!
        bannerImageUrl: String!
        thumbnailImageUrl: String!
        genre1: Genre!
        genre2: Genre
        language: Language!
        rating: ContentRating!
        tags: [String]
    ): InternalComicSeries
    updateInternalComicForUser(
        uuid: ID!
        name: String!
        description: String!
        coverImageUrl: String!
        bannerImageUrl: String!
        thumbnailImageUrl: String!
        genre1: Genre!
        genre2: Genre
        language: Language!
        rating: ContentRating!
        tags: [String]
    ): InternalComicSeries
    deleteInternalComicForUser(uuid: ID!): ID
    updateStatusForInternalComicSeries(
        uuid: ID!
        status: InternalPublishStatus!
    ): InternalComicSeries
    addInternalComicIssueForUser(
        uuid: ID!
        seriesUuid: ID!
        name: String!
        description: String
        bannerImageUrl: String!
        thumbnailImageUrl: String!
        imageUrls: [String]!
        publishAt: String
    ): InternalComicIssue
    updateInternalComicIssueForUser(
        uuid: ID!
        name: String!
        description: String
        bannerImageUrl: String!
        thumbnailImageUrl: String!
        imageUrls: [String]!
        publishAt: String
        hasImagesCurrentlyProcessing: Boolean
    ): InternalComicIssue
    unpublishInternalComicIssueForUser(uuid: ID!): InternalComicIssue
    deleteInternalComicIssueForUser(uuid: ID!): ID
    addInternalCreatorForUser(
        uuid: ID!
        name: String!
        bio: String
        avatarImageUrl: String!
        country: Country
        links: [String]
        tags: [String]
    ): InternalCreator
    updateInternalCreatorForUser(
        uuid: ID!
        name: String!
        bio: String
        avatarImageUrl: String!
        country: Country
        links: [String]
        tags: [String]
    ): InternalCreator
    deleteInternalCreatorForUser(uuid: ID!): ID
    updateStatusForInternalCreator(
        uuid: ID!
        status: InternalPublishStatus!
    ): InternalCreator
    addOrUpdateInternalCreatorRolesForContent(
        contentUuid: ID!
        contentType: String!
        creatorUuid: ID!
        roles: [ContentRole]!
    ): TeamInternalCreatorRoles
    addInternalInvitationForContent(
        contentUuid: ID!
        contentType: String!
        email: String!
        permission: UserPermission!
    ): TeamInternalInvitations
    expireInternalInvitationForContent(
        contentUuid: ID!
        contentType: String!
        id: ID!
    ): TeamInternalInvitations
}

enum PodcastContentType {
    AUDIO
    VIDEO
}

type PodcastEpisode {
    uuid: ID
    datePublished: Int
    name: String
    description(shouldStripHtmlTags: Boolean): String
    imageUrl: String
    hash: String
    guid: String
    subtitle: String
    audioUrl: String
    videoUrl: String
    fileLength: Int
    fileType: String
    duration: Int
    episodeType: PodcastEpisodeType
    seasonNumber: Int
    episodeNumber: Int
    websiteUrl: String
    isExplicitContent: Boolean
    isRemoved: Boolean
    isBlocked: Boolean
    podcastSeries: PodcastSeries
}

enum PodcastEpisodeType {
    TRAILER
    BONUS
    FULL
}

type PodcastSeries {
    uuid: ID
    datePublished: Int
    name: String
    description(shouldStripHtmlTags: Boolean): String
    imageUrl: String
    itunesId: Int
    hash: String
    childrenHash: String
    episodes(
        sortOrder: SortOrder
        page: Int
        limitPerPage: Int
        searchTerm: String
        includeRemovedEpisodes: Boolean
    ): [PodcastEpisode]
    genres: [Genre]
    itunesInfo: iTunesInfo
    seriesType: PodcastSeriesType
    language: Language
    contentType: PodcastContentType
    isExplicitContent: Boolean
    copyright: String
    websiteUrl: String
    rssUrl: String
    rssOwnerName: String
    rssOwnerPublicEmail: String
    authorName: String
    feedRefreshDetails: FeedRefreshDetails
    isCompleted: Boolean
    isComplete: Boolean
    isBlocked: Boolean
}

enum PodcastSeriesType {
    SERIAL
    EPISODIC
}

type Query {
    getPodcastSeries(
        uuid: ID
        itunesId: Int
        rssUrl: String
        name: String
    ): PodcastSeries
    getMultiplePodcastSeries(uuids: [ID]): [PodcastSeries]
    getPodcastEpisode(
        uuid: ID
        guid: String
        name: String
    ): PodcastEpisode
    getMultiplePodcastEpisodes(uuids: [ID]): [PodcastEpisode]
    getComicSeries(
        uuid: ID
        sssUrl: String
        name: String
    ): ComicSeries
    getMultipleComicSeries(uuids: [ID]): [ComicSeries]
    getComicIssue(
        uuid: ID
        name: String
    ): ComicIssue
    getMultipleComicIssues(uuids: [ID]): [ComicIssue]
    getComicStory(uuid: ID): ComicStory
    getMultipleComicStories(uuids: [ID]): [ComicStory]
    getCreator(
        uuid: ID
        sssUrl: String
        name: String
    ): Creator
    getMultipleCreators(uuids: [ID]): [Creator]
    getCreatorContent(uuid: ID): CreatorContent
    searchForTerm(
        term: String
        page: Int
        limitPerPage: Int
        filterForTypes: [TaddyType]
        filterForCountries: [Country]
        filterForLanguages: [Language]
        filterForGenres: [Genre]
        filterForTags: [String]
        filterForContentRatings: [ContentRating]
        filterForContentRoles: [ContentRole]
        filterForSeriesUuids: [ID]
        filterForNotInSeriesUuids: [ID]
        isExactPhraseSearchMode: Boolean
        isSafeMode: Boolean
        searchResultsBoostType: SearchResultBoostType
    ): SearchResults
    getDocumenation(id: ID!): Documentation
    getMyDeveloperApplications(limit: Int): UserDevApps
    getMyDeveloperWebhooks(limit: Int): UserWebhooks
    me: User
    getItunesInfo(
        uuid: ID
        itunesId: Int
    ): iTunesInfo
    getMyInternalSeries(
        filterForTypes: [InternalSeriesType]
    ): UserInternalSeriesList
    getPreviewDetailsForSeries(
        contentUuid: ID!
        contentType: String!
    ): UserInternalSeriesList
    getInternalComicForUser(uuid: ID!): InternalComicSeries
    getInternalComicIssue(uuid: ID!, seriesUuid: ID!): InternalComicIssue
    getInternalCreatorForUser(uuid: ID!, permissionType: String): InternalCreator
    getInternalCreatorsForUser(permissionType: String): [InternalCreator]
    getInternalCreatorsForContent(
        contentUuid: ID!
        contentType: String!
    ): [InternalCreator]
    getInternalCreatorRolesForContent(
        contentUuid: ID
        contentType: String
    ): TeamInternalCreatorRoles
    getInternalInvitationsForContent(
        contentUuid: ID
        contentType: String
    ): TeamInternalInvitations
    getPermissionForItem(uuid: ID!, taddyType: String!): UserPermission
}

type SearchQueryResponseInfo {
    searchId: ID!
    took: Int
    responseInfoDetails: [SearchQueryResponseInfoDetails]
}

type SearchQueryResponseInfoDetails {
    searchId: ID!
    type: TaddyType
    totalCount: Int
    pagesCount: Int
}

enum SearchResultBoostType {
    BOOST_EXACT_TERM
    BOOST_POPULARITY_A_LOT
    BOOST_POPULARITY_A_LITTLE
}

type SearchResults {
    searchId: ID!
    podcastSeries: [PodcastSeries]
    podcastEpisodes: [PodcastEpisode]
    comicSeries: [ComicSeries]
    comicIssues: [ComicIssue]
    creators: [Creator]
    queryResponseInfo: SearchQueryResponseInfo
}

enum SortOrder {
    LATEST
    OLDEST
    SEARCH
}

enum TaddyType {
    PODCASTSERIES
    PODCASTEPISODE
    COMICSERIES
    COMICISSUE
    CREATOR
}

type TeamInternalCreatorRoles {
    contentUuid: ID
    contentType: String
    creatorRoles: [InternalCreatorRoles]
    internalCreators: [InternalCreator]
}

type TeamInternalInvitations {
    contentUuid: ID
    contentType: String
    invitations: [InternalInvitation]
}

type User {
    id: ID
    myDeveloperDetails: UserDeveloperDetails
    myDeveloperBillingPlanDetails: UserDeveloperBillingPlanDetails
}

type UserDevApps {
    userId: ID
    devApps: [DevApp]
}

type UserDeveloperBillingPlanDetails {
    userId: ID
    currentPeriodEnd: Float
    cancelAt: Float
    primaryProduct: String
    addons: [String]
}

type UserDeveloperDetails {
    userId: ID
    currentApiUsage: Int
    allowedApiCallsLimit: Int
    allowedDevAppsLimit: Int
    allowedWebhookLimit: Int
}

type UserInternalSeriesList {
    userId: ID
    internalcomicseries: [InternalComicSeries]
    internalcreator: [InternalCreator]
}

enum UserPermission {
    OWNER
    ADMIN
    CONTRIBUTOR
    VIEWER
}

type UserWebhooks {
    userId: ID
    webhooks: [Webhook]
}

type Webhook {
    id: ID!
    createdAt: Int
    user: User
    endpointUrl: String
    webhookSecret: String
    isVerified: Boolean
    isActive: Boolean
    events: [String]
}

type WebhookEvent {
    uuid: ID
    action: WebhookEventActionType
    taddyType: String
    timestamp: Float
    podcastSeries: PodcastSeries
    podcastEpisode: PodcastEpisode
    itunesInfo: iTunesInfo
}

enum WebhookEventActionType {
    created
    updated
    deleted
    new_episodes_released
}

type WebsubDetails {
    uuid: ID
    topicUrl: String
    websubHubUrl: String
    isVerified: Boolean
}

